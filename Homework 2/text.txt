        

Problem 2:
	int main()
        {
            char maze[10][10] = {
                { 'X','X','X','X','X','X','X','X','X','X' },
                { 'X','.','.','.','.','X','.','.','X','X' },
                { 'X','.','X','X','.','X','X','.','.','X' },
                { 'X','X','X','.','.','.','.','X','.','X' },
                { 'X','.','X','X','X','.','X','X','X','X' },
                { 'X','.','X','.','.','.','X','.','.','X' },
                { 'X','.','.','.','X','.','X','.','.','X' },
                { 'X','X','X','X','X','.','X','.','X','X' },
                { 'X','.','.','.','.','.','.','.','.','X' },
                { 'X','X','X','X','X','X','X','X','X','X' }
            };
        
            if (pathExists(maze, 3,5, 8,8))
                cout << "Solvable!" << endl;
            else
                cout << "Out of luck!" << endl;
        }
1st iteration:
(r, c) = (3, 5)
(3, 5) is popped
Stack: 
(3, 6)top
(3, 4)
(4, 5)bottom

2nd iteration:
(R, c) = (3, 6)
(3, 6) is popped
Stack:
(3, 4)top
(4, 5)bottom

3rd iteration:
(R, c) = (3, 4)
(3, 4) is popped
Stack:
(2, 4)top
(3, 3)
(4, 5)bottom

4th iteration:
(R, c) = (2, 4)
(2, 4) is popped
Stack:
(1, 4)top
(3, 3)
(4, 5)bottom

5th iteration:
(R, c) = (1, 4)
(1, 4) is popped
Stack:
(1, 3)top
(3, 3)
(4, 5)bottom

6th iteration:
(R, c) = (1, 3)
(1, 3) is popped
Stack:
(1, 2)top
(3, 3)
(4, 5)bottom

7th iteration:
(R, c) = (1, 2)
(1, 2) is popped
Stack:
(1, 1)top
(3, 3)
(4, 5)bottom

8th iteration:
(R, c) = (1, 1)
(1, 1) is popped
Stack:
(2, 1)top
(3, 3)
(4, 5)bottom

9th iteration:
(R, c) = (2, 1)
(2, 1) is popped
Stack:
(3, 3)
(4, 5)bottom

10th iteration:
(R, c) = (3, 3)
(3, 3) is popped
Stack:
(4, 5)top/bottom

11th iteration:
(R, c) = (4, 5)
(4, 5) is popped
Stack:
(5, 5)top/bottom

12th iteration:
(R, c) = (5, 5)
(5, 5) is popped
Stack:
(5, 4)top
(6, 5)bottom

The first twelve (r, c) coordinates that are popped off the stack are:
(3, 5), (3, 6), (3, 4), (2, 4), (1, 4), (1, 3), (1, 2), (1, 1), (2, 1), (3, 3), (4, 5), and (5, 5)
in this order.








Problem 4:

        int main()
        {
            char maze[10][10] = {
                { 'X','X','X','X','X','X','X','X','X','X' },
                { 'X','.','.','.','.','X','.','.','X','X' },
                { 'X','.','X','X','.','X','X','.','.','X' },
                { 'X','X','X','.','.','.','.','X','.','X' },
                { 'X','.','X','X','X','.','X','X','X','X' },
                { 'X','.','X','.','.','.','X','.','.','X' },
                { 'X','.','.','.','X','.','X','.','.','X' },
                { 'X','X','X','X','X','.','X','.','X','X' },
                { 'X','.','.','.','.','.','.','.','.','X' },
                { 'X','X','X','X','X','X','X','X','X','X' }
            };
        
            if (pathExists(maze, 3,5, 8,8))
                cout << "Solvable!" << endl;
            else
                cout << "Out of luck!" << endl;
        }

1st iteration:
(R, c) = (3, 5)
(3, 5) is popped
Queue:
(4, 5)front
(3, 4)
(3, 6)back

2nd iteration:
(R, c) = (4, 5)
(4, 5) is popped
Queue:
(3, 4)front
(3, 6)
(5, 5)back

3rd iteration:
(R, c) = (3, 4)
(3, 4) is popped
Queue:
(3, 6)front
(5, 5)
(3, 3)
(2, 4)back

4th iteration:
(R, c) = (3, 6)
(3, 6) is popped
Queue:
(5, 5)front
(3, 3)
(2, 4)back

5th iteration:
(R, c) = (5, 5)
(5, 5) is popped
Queue:
(3, 3)front
(2, 4)
(6, 5)
(5, 4)back

6th iteration:
(R, c) = (3, 3)
(3, 3) is popped
Queue:
(2, 4)front
(6, 5)
(5, 4)back

7th iteration:
(R, c) = (2, 4)
(2, 4) is popped
Queue:
(6, 5)front
(5, 4)
(1, 4)back

8th iteration:
(R, c) = (6, 5)
(6, 5) is popped
Queue:
(5, 4)front
(1, 4)
(7, 5)back

9th iteration:
(R, c) = (5, 4)
(5, 4) is popped
Queue:
(1, 4)front
(7, 5)
(5, 3)back

10th iteration:
(R, c) = (1, 4)
(1, 4) is popped
Queue:
(7, 5)front
(5, 3)
(1, 3)back

11th iteration:
(R, c) = (7, 5)
(7, 5) is popped
Queue:
(5, 3)front
(1, 3)
(8, 5)back

12th iteration:
(R, c) = (5, 3)
(5, 3) is popped
Queue:
(1, 3)front
(8, 5)
(6, 3)back

The first twelve (r, c) coordinates that are popped off the queue are:
(3, 5), (4, 5), (3, 4), (3, 6), (5, 5), (3, 3), (2, 4), (6, 5), (5, 4), (1, 4), (7, 5), and (5, 3)
in this order.


The stack and queue maze algorithm differs in their order of visiting the cells in the maze. For the stack algorithm, it goes all the way through one path first (until it is blocked), and then tries another path in a new direction until it either finds a path or there is no path. In contrast, queue algorithm goes through one step in each direction. It goes one step into all possible directions, determines the subpaths of each direction, and then visits all the subpaths one step and repeats until it finds a path or all the subpaths are blocked. To picture it, stack algorithm goes all the way to one direction, and then another, and repeat, while queues slowly spread out by going one step into each possible direction. 
This is because the nature of how stacks and queues add and delete items. Stacks can only add and delete items on the top, so it has to go all the way into one path and then another. Meanwhile, queues' items can be deleted only at the front, and added only at the back so all the top coordinates which are the different paths each have to be examined first, then it can examine each of the subpaths of those paths, etc.





















































